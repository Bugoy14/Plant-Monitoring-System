#include <ESP8266WiFi.h>
#include <WiFiClient.h>
#include <SoftwareSerial.h>
#include <ArduinoJson.h>
#include <ESP8266WebServer.h>
#include <LiquidCrystal_I2C.h>
#include <FS.h>

SoftwareSerial nodemcu(D6, D5);
ESP8266WebServer server(80);
LiquidCrystal_I2C lcd(0x27, 20, 4);

const char * ssid = "CHEETAH-2.4G-tvTO";
const char * password = "DtZVEidp";

float temperature = 0.0;
float humidity = 0.0;
float soil_moisture = 0.0;
String getIP = "";

void setup() {
  Serial.begin(9600);
  nodemcu.begin(9600);
  lcd.init();
  lcd.backlight();

  WiFi.begin(ssid, password); // connect to the WiFi network

  while (WiFi.status() != WL_CONNECTED) { // wait until the connection is successful
    delay(1000);
    Serial.println("Connecting to WiFi..");
  }

  if(!SPIFFS.begin()){
    Serial.println("SPIFFS Mount failed");
  } else{
    Serial.println("SPIFFS Mount successful");
  }

  server.onNotFound([](){
    if(!handleFileRead(server.uri()))
      server.send(404, "text/plain", "404 Not Found");
  });

  server.begin(); // start the server

  Serial.print("IP address: ");
  Serial.println(WiFi.localIP()); // print the IP address to the serial monitor
  String IPaddress = WiFi.localIP().toString();
  getIP = IPaddress;

  server.on("/temperature", [](){
  server.send(200, "text/plain", String(temperature));
  });
  
  server.on("/humidity", [](){
    server.send(200, "text/plain", String(humidity));
  });
  
  server.on("/soil_moisture", [](){
    server.send(200, "text/plain", String(soil_moisture));
  });
}

void loop() {
  server.handleClient();
  
  StaticJsonBuffer < 1000 > jsonBuffer; // static JsonBuffer with a capacity of 1000 bytes
  JsonObject & data = jsonBuffer.parseObject(nodemcu);
  
  if (data == JsonObject::invalid()) {
    //Serial.println("Invalid Json Object");
    jsonBuffer.clear();
    return;
  }

  Serial.println("JSON Object Recieved");
  temperature = data["temperature"];
  lcd.setCursor(0, 0);
  lcd.print("Temperature: " + String(temperature) + " C");

  humidity = data["humidity"];
  lcd.setCursor(0, 1);
  lcd.print("Humidity: " + String(humidity) + "%");

  soil_moisture = data["soil_moisture"];
  lcd.setCursor(0, 2);
  lcd.print("S Moisture: " + String(soil_moisture)+ "%");

  lcd.setCursor(0, 3);
  lcd.print("IP: " + (getIP));
  Serial.println("-----------------------------------------");
}

bool handleFileRead(String path) { // send the right file to the client (if it exists)
  Serial.println("handleFileRead: " + path);
  if (path.endsWith("/")) path += "index.html"; // If a folder is requested, send the index file
  if (path.endsWith("/")) path += "about.html";
  String contentType = getContentType(path); // Get the MIME type
  if (SPIFFS.exists(path)) { // If the file exists
    File file = SPIFFS.open(path, "r"); // Open it
    size_t sent = server.streamFile(file, contentType); // And send it to the client
    file.close(); // Then close the file again
    return true;
  }
  Serial.println((path) + "File Not Found");
  return false; // If the file doesn't exist, return false
}

String getContentType(String filename){
  if(filename.endsWith(".htm")) return "text/html";
  else if(filename.endsWith(".html")) return "text/html";
  else if(filename.endsWith(".css")) return "text/css";
  else if(filename.endsWith(".jpg")) return "text/jpeg";
  return "text/plain";  
}